language: node_js

sudo: false

# build options and AWS keys for publishing binaries
# note: you'll need to generate your own keys for publishing a separate project
env:
  global:
  - secure: Dyp9QI1bDJv5vBjVYvV8W/A6NMOhBWSOicIUN560ZEPJrpqy1xI8tjQK7Tbfv8yCMPDr/KlQq4GPeujCL+J6BuXkwa1eVASJVMvcbaVLMhsirQcAMS0khO1xgPIPUKCrsritXTqyvFd+/6Q70DkufZcx6RNG3JmKxNZTh2oiz6PzB8FWsixOaaHTUjljaJXujg3x0TUL/Udxu2pmAT0y8Z+qARzG5lhd/S4pRvIvj87bU2nokWuTLRINE1Y2kFl3+thf3LluEKGwQx9u7nAepb9nA0ewcvYu81rKiAZ3CH+PG6mqkNyN2ptBhFGgBC1YhMSBHEcOERJCBEA1MFJuhIt+frqYtgraOhGjV07qqnnU2JTdYKSo8eGCVz+RWtTFdcAM90yHYFML1XwHrbdSNvdQ1nThLdLOLYf3XXfjubnzW+7mspveWzCC9Ps/BytEQBeWbyjUCs73q/CJw+T5UwOAhRV4ua0yqcWC51D+JcFnRe4Px/JnEwe1etOtkT0NkmGpdMZBZVhUY5Dz2/UrbWW+myoKPWVA0gnI/+coz8+w2WqoaOAKnKAhWfo7NSszri5XlcG9CpUPUzn5eQbZO7q0drq5qeep/HZavXL2FyGq8xrGtVMb5WDbmnSmwP9RyyHy0JQV6yiLYiLUlemcU8bj/hicGbb6Zt4WWsq+Yh4=
  - secure: XQ5gzkIxKdAxYBZjxCHyA6cMZIt/IcPX8kZCumiZXj/zOLYiWh1v5pIT73uWpz+GVvmwdnDeCjsaIb+9Ui1vHYuxAo9xpGVSdenh5hLP9H4ydnJJoqWq6eqDeY0dkEi/YhAzEzoOc4+tXTKRXt9b2v/vjp37ytc3wNyxws4MOdb7ECQOM5OUV85EL+69CIHMEkU2zKvhqWjzXRmCtnBswuooblP2RS/tIXXFES64FCynBjGKkDX7zjeF/Wr8vjn3OBXvgIiCXxFYYDtSI3S98R7R+3SMa3swMp2qIaVlMmy7knqMJgQZEp+TpdnTGMeFhqBEGBmv9vBR6+n4SC05tQEvMN/FLqpbWaMHskqXKEZQSBQKmOZ2jj+n7ibEjtfRFqXTQfvmp2uA6g5vO3hEpI9pE5nU9ThIq08ZGoV4okGe5JEXvQBz+t6oYwGOXVBHcLZ1RMjsHoedkV1gRowxW/GiPNmbeN7Awr4ukNHbRf9XF2ucAGKgUhR0BAMhtMRwLrrC8m9EmCBt0mEK3t70QixrZEkV6NhIs0hHUQ9R6/Mw8wI1JKJbWvXOWxvIGc6IhluPHRWUjgIKqgdi7MSrJR6VroPj3tqfUSf4EPkTkJ1e5kSH1aDDM88URIJrR/yIuk6i50FmDebqT3inDK78FGUBY5BG1gcdGVbR68/goMc=

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# run tests
# We use before_script rather than script to ensure fast failure (the script section continues even after an error)
# https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
before_script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# override script default (npm test) to do nothing (we test in before_script)
script:
  - true

# the matrix allows you to specify different operating systems and environments to
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v4/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 4
    # linux publishable node v4/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 4
    # linux publishable node v6
    - os: linux
      env: BUILDTYPE=release
      node_js: 6
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 6
    # osx publishable node v4
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 4
    # osx publishable node v6
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 6
    # Sanitizer build node v4/Debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 4
      # Overrides `install` to set up custom asan flags
      install:
        - ./scripts/setup.sh --config local.env
        # put mason and clang++ on PATH
        - source local.env
        # Note: to build without stopping on errors remove the -fno-sanitize-recover=all flag
        # You might want to do this if there are multiple errors and you want to see them all before fixing
        - export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
        - export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
        - make ${BUILDTYPE}
      # Overrides `script` to disable asan LD_PRELOAD before publishing
      before_script:
        - export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
        - export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
        - npm test
        - unset LD_PRELOAD
    # g++ build (default builds all use clang++)
    - os: linux
      env: BUILDTYPE=debug CXX="g++-6" CC="gcc-6"
      node_js: 4
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-6-dev
            - g++-6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      before_script:
        - npm test
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 4
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - ./scripts/format.sh
        - npm run coverage
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
